version: "3"
# runs the entire rudder pipeline with all supporting services (including rudder) in docker
# set .env such that all services in docker are talking to each other only
services:
  eth-node:
    image: "us-docker.pkg.dev/covalent-project/network/operational-staking:latest-rudder@sha256:e498818b3f6d6f15d8ad8414611eeb8e2d71be2b06bb928ebce1d90ba96fe36c"
    container_name: hardhat-node
    restart: on-failure
    expose:
      - "8545:8545"
    entrypoint: |
      /bin/bash -l -c "
      echo "forked-node-address:" $ERIGON_NODE;
      ./entrypoint.sh;"
    networks:
      - cqt-net
    environment:
      - ERIGON_NODE=${ERIGON_NODE}
    ports:
      - "8545:8545"

  operational-staking:
    image: "us-docker.pkg.dev/covalent-project/network/operational-staking:latest-rudder@sha256:e498818b3f6d6f15d8ad8414611eeb8e2d71be2b06bb928ebce1d90ba96fe36c"
    container_name: proof-chain
    restart: on-failure
    entrypoint: |
      /bin/bash -l -c "
      echo Waiting for hardhat-node to start up...;
      sleep 20;
      echo hard-hat node started!;
      echo "web3-jwt:" $WEB3_JWT;
      npm run docker:deploy;
      nc -v rudder 8008;
      sleep 1000000;"
    depends_on:
      - eth-node
    networks:
      - cqt-net
    ports:
      - "8008:8008"

  ipfs-pinner:
    image: "us-docker.pkg.dev/covalent-project/network/ipfs-pinner:stable"
    volumes:
      - ~/.ipfs:/root/.ipfs/
    container_name: ipfs-pinner
    restart: on-failure
    expose:
      - "4001:4001"
      - "3001:3001"
    environment:
      - WEB3_JWT=${WEB3_JWT}
    networks:
      - cqt-net
    ports:
      - "4001:4001"
      - "3001:3001"

  evm-server:
    image: "us-docker.pkg.dev/covalent-project/network/evm-server:stable"
    container_name: evm-server
    restart: on-failure
    expose:
      - "3002:3002"
    networks:
      - cqt-net
    ports:
      - "3002:3002"

  rudder:
    # image: "us-docker.pkg.dev/covalent-project/network/rudder:latest"
    container_name: rudder
    links:
      - "ipfs-pinner:ipfs-pinner"
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    depends_on:
      ipfs-pinner:
        condition: service_healthy
      evm-server:
        condition: service_healthy
    entrypoint: >
      /bin/bash -l -c "
        echo "ipfs-node-address:" $IPFS_PINNER_URL;
        echo "hardhat-node-address:" $NODE_ETHEREUM_MAINNET;
        echo "brp-op-pk:" $BLOCK_RESULT_OPERATOR_PRIVATE_KEY;
        echo "evm-server-address:" $EVM_SERVER_URL;
        echo "code-test-coverage:" $CODECOV_TOKEN;
        echo Waiting for proof-chain to be deployed...;
        while ! nc -v -l -k -p 8008;
        do
        sleep 1;
        done;
        echo Proof-chain contracts deployed!;
        echo Uploading test files to local .ipfs...;
        curl -F "filedata=@/app/test-data/codec-0.35/encoded/1-17090940-replica-0x7b8e1d463a0fbc6fce05b31c5c30e605aa13efaca14a1f3ba991d33ea979b12b" http://ipfs-pinner:3001/upload;
        curl -F "filedata=@/app/test-data/codec-0.35/encoded/1-17090960-replica-0xc95d44182ee006e79f1352ef32664210f383baa016988d5ab2fd950b52bf22ff" http://ipfs-pinner:3001/upload;
        echo Test bsp files uploaded!;
        cd /mix;
        MIX_ENV=docker mix coveralls.json;
        curl -Os https://uploader.codecov.io/latest/linux/codecov;
        chmod +x codecov;
        ./codecov -t $CODECOV_TOKEN -C $GITHUB_SHA -r $CODECOV_SLUG -B GITHUB_BRANCH; "
    environment:
      - NODE_ETHEREUM_MAINNET=${NODE_ETHEREUM_MAINNET}
      - BLOCK_RESULT_OPERATOR_PRIVATE_KEY=${BLOCK_RESULT_OPERATOR_PRIVATE_KEY}
      - EVM_SERVER_URL=${EVM_SERVER_URL}
      - IPFS_PINNER_URL=${IPFS_PINNER_URL}
      - CODECOV_TOKEN=${CODECOV_TOKEN}
      - CI=${CI}
    networks:
      - cqt-net

networks:
  cqt-net:
